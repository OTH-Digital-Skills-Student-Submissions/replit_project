import os
from set_git_config import set_git_config
from replit import db
from cryptography.hazmat.primitives import serialization as crypto_serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.backends import default_backend as crypto_default_backend

# Write bash aliases
file_path = os.path.realpath(os.path.dirname(__file__))
f = open("/home/runner/.custom_bashrc", "w")
f.writelines([
    "if [ ! -f ~/.ssh/known_hosts ] || ! grep github.com ~/.ssh/known_hosts > /dev/null",
    "\nthen",
     "\n   echo \"github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=\" >> ~/.ssh/known_hosts", 
    "\nfi",
    "\nexport PROMPT_DIRTRIM=1"
    "\nPS1=\"[0;32mOTH-Console\e[0m:\w> \""
    "\nalias get='bash %s/get.sh'" % file_path,
    "\nalias submit='bash %s/submit.sh'" % file_path,
    "\nalias check='bash %s/check.sh'" % file_path,
    "\nalias github='python %s/github_key.py'" % file_path
])
f.close()

# Add git keys
ssh_path = "/home/runner/.ssh"
try:
    # Create ssh folder
    if not os.path.isdir(ssh_path):
        os.mkdir(ssh_path)
except OSError:
    print("Creation of the directory %s failed" % ssh_path)
else:
    # Crypto key
    key = rsa.generate_private_key(
        backend=crypto_default_backend(),
        public_exponent=65537,
        key_size=2048
    )

    # Private ssh key
    private_ssh_key_path = "%s/id_rsa" % ssh_path
    private_ssh_key = db["private_ssh_key"] if "private_ssh_key" in db else ""
    if not private_ssh_key:
        private_ssh_key = key.private_bytes(
            crypto_serialization.Encoding.PEM,
            crypto_serialization.PrivateFormat.PKCS8,
            crypto_serialization.NoEncryption()
        )
        private_ssh_key = private_ssh_key.decode("UTF-8")
    else:
        private_ssh_key = bytes(private_ssh_key, "utf-8")
        private_ssh_key = private_ssh_key.decode("unicode_escape")
    f = open(private_ssh_key_path, "w")
    f.write(private_ssh_key or "")
    f.close()
    os.chmod(private_ssh_key_path, 0o600)

    # Public ssh key
    public_ssh_key_path = "%s/id_rsa.pub" % ssh_path
    public_ssh_key = db["public_ssh_key"] if "public_ssh_key" in db else ""
    if not public_ssh_key:
        public_ssh_key = key.public_key().public_bytes(
            crypto_serialization.Encoding.OpenSSH,
            crypto_serialization.PublicFormat.OpenSSH
        )
        public_ssh_key = public_ssh_key.decode("utf-8")
    else:
        public_ssh_key = bytes(public_ssh_key, "utf-8")
        public_ssh_key = public_ssh_key.decode("unicode_escape")
    f = open(public_ssh_key_path, "w")
    f.write(public_ssh_key or "")
    f.close()
    os.chmod(public_ssh_key_path, 0o600)

    # Store keys in database
    db["public_ssh_key"] = public_ssh_key
    db["private_ssh_key"] = private_ssh_key

    # Git config
    git_config_name = db["git_config_name"] if "git_config_name" in db else ""
    git_config_mail = db["git_config_mail"] if "git_config_mail" in db else ""
    if git_config_name and git_config_mail:
        set_git_config(git_config_name, git_config_mail)

    # Ready
    print("Starting OTH-Console...")
    print("\nYou now can use the commands get, check and submit.")
